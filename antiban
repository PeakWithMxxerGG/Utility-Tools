local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local NetworkClient = game:GetService("NetworkClient")
local CoreGui = game:GetService("CoreGui")
local ScriptContext = game:GetService("ScriptContext")
local LogService = game:GetService("LogService")
local RbxAnalyticsService = game:GetService("RbxAnalyticsService")

local BadFunctions = {
    "kick", "ban", "punish", "benx", "crash", "sanction", "violation", "blacklist", 
    "freeze", "halt", "stop", "destroy", "delete", "remove", "terminate", "shutdown",
    "report", "warn", "moderate", "filter", "check", "verify", "authenticate", "validate",
    "detect", "analyze", "monitor", "track", "log", "record", "capture", "screenshot",
    "teleport", "tp", "send", "force", "kill", "damage", "hurt", "break", "exploit",
    "hack", "script", "remote", "event", "function", "method", "property", "value",
    "parent", "child", "descendant", "ancestor", "relative", "connection", "signal",
    "bindable", "hook", "meta", "env", "registry", "memory", "process", "thread"
}

local BadEvents = {
    "PlayerRemoving", "CharacterRemoving", "Kick", "Ban", "Punish", "Report",
    "OnClientKick", "OnClientBan", "OnClientPunish", "OnClientReport",
    "OnKick", "OnBan", "OnPunish", "OnReport", "OnViolation", "OnSanction",
    "OnBlacklist", "OnFreeze", "OnHalt", "OnStop", "OnDestroy", "OnDelete",
    "OnRemove", "OnTerminate", "OnShutdown", "OnClose", "OnExit", "OnQuit"
}

local BadProperties = {
    "Disabled", "Enabled", "Visible", "CanCollide", "Anchored", "Locked",
    "Archived", "AutoJointMode", "CollisionFidelity", "ModelStreamingMode",
    "PrimaryPart", "RootPart", "Health", "MaxHealth", "WalkSpeed", "JumpPower"
}

local BadMethods = {
    "Destroy", "Remove", "Clone", "ClearAllChildren", "GetChildren", "GetDescendants",
    "FindFirstChild", "FindFirstDescendant", "WaitForChild", "GetPropertyChangedSignal",
    "GetAttribute", "SetAttribute", "GetAttributes", "IsA", "IsDescendantOf", "IsAncestorOf"
}

local function blockBadFunction(func)
    if typeof(func) == "function" then
        local info = debug.getinfo(func)
        if info and info.name then
            for _, bad in pairs(BadFunctions) do
                if info.name:lower():match(bad:lower()) then
                    return true
                end
            end
        end
    end
    return false
end

local function generateFakeThread()
    return coroutine.create(function()
        while true do
            task.wait(9e9)
        end
    end)
end

local function spoofMemory()
    local fakeMemory = {}
    for i = 1, 1000 do
        fakeMemory[i] = {
            thread = generateFakeThread(),
            data = string.rep("üõ°Ô∏è", 1000),
            functions = {},
            events = {},
            connections = {},
            instances = {},
            properties = {},
            methods = {}
        }
    end
    return fakeMemory
end

local function protectThreads()
    local protected = {}
    for _, thread in pairs(debug.getregistry()) do
        if type(thread) == "thread" then
            table.insert(protected, {
                original = thread,
                fake = generateFakeThread()
            })
            coroutine.wrap(function()
                while task.wait() do
                    thread = protected[#protected].fake
                end
            end)()
        end
    end
    return protected
end

local function scrambleInstance()
    for _, instance in pairs(game:GetDescendants()) do
        if instance:IsA("LocalScript") or instance:IsA("ModuleScript") then
            pcall(function()
                instance.Source = string.rep("--PROTECTED\n", 100)
            end)
        end
    end
end

local function blockBanRemotes()
    for _, remote in pairs(game:GetDescendants()) do
        if remote:IsA("RemoteEvent") or remote:IsA("RemoteFunction") then
            local name = remote.Name:lower()
            for _, bad in pairs(BadFunctions) do
                if name:match(bad:lower()) then
                    remote.Parent = nil
                    WebhookSystem.Send("üõ°Ô∏è Protection", "Blocked Malicious Remote: "..remote.Name, 0xff0000)
                end
            end
        end
    end
end

local function setupEnhancedAntiBan()
    local mt = getrawmetatable(game)
    local oldIndex = mt.__index
    local oldNamecall = mt.__namecall
    local oldNewIndex = mt.__newindex
    setreadonly(mt, false)

    mt.__index = newcclosure(function(self, key)
        if not checkcaller() then
            if typeof(key) == "string" then
                local lkey = key:lower()
                for _, bad in pairs(BadFunctions) do
                    if lkey:match(bad:lower()) then
                        WebhookSystem.Send("üõ°Ô∏è Protection", "Blocked Malicious Index: "..key, 0xff0000)
                        return wait(9e9)
                    end
                end
            end
        end
        return oldIndex(self, key)
    end)

    mt.__namecall = newcclosure(function(self, ...)
        local method = getnamecallmethod()
        local args = {...}
        
        if not checkcaller() then
            local lmethod = method:lower()
            for _, bad in pairs(BadMethods) do
                if lmethod:match(bad:lower()) then
                    WebhookSystem.Send("üõ°Ô∏è Protection", "Blocked Malicious Call: "..method, 0xff0000)
                    return wait(9e9)
                end
            end
            
            for _, arg in pairs(args) do
                if typeof(arg) == "string" then
                    local larg = arg:lower()
                    for _, bad in pairs(BadFunctions) do
                        if larg:match(bad:lower()) then
                            WebhookSystem.Send("üõ°Ô∏è Protection", "Blocked Malicious Argument", 0xff0000)
                            return wait(9e9)
                        end
                    end
                end
            end
        end
        
        return oldNamecall(self, ...)
    end)

    mt.__newindex = newcclosure(function(self, key, value)
        if not checkcaller() then
            if typeof(key) == "string" then
                local lkey = key:lower()
                for _, bad in pairs(BadProperties) do
                    if lkey:match(bad:lower()) then
                        WebhookSystem.Send("üõ°Ô∏è Protection", "Blocked Malicious Property Set: "..key, 0xff0000)
                        return wait(9e9)
                    end
                end
            end
        end
        return oldNewIndex(self, key, value)
    end)

    setreadonly(mt, true)

    local fakeEnv = setmetatable({}, {
        __index = function(_, key)
            if typeof(key) == "string" then
                local lkey = key:lower()
                for _, bad in pairs(BadFunctions) do
                    if lkey:match(bad:lower()) then
                        return function() end
                    end
                end
            end
            return game[key]
        end
    })
    
    gethui = function() return fakeEnv end
    getgenv().game = fakeEnv

    spawn(function()
        while task.wait() do
            blockBanRemotes()
            spoofMemory()
            protectThreads()
            scrambleInstance()
        end
    end)

    for _, connection in pairs(getconnections(game:GetService("ScriptContext").Error)) do
        connection:Disable()
    end
    
    for _, connection in pairs(getconnections(game:GetService("LogService").MessageOut)) do
        connection:Disable()
    end

    hookfunction(LocalPlayer.Kick, function() return wait(9e9) end)
    hookfunction(LocalPlayer.kick, function() return wait(9e9) end)
    hookfunction(game.Shutdown, function() return wait(9e9) end)
    hookfunction(game.shutdown, function() return wait(9e9) end)

    WebhookSystem.Send("‚úÖ Protection", "Enhanced Supreme Protection System Active", 0x00ff00)
end

getgenv().SupremeProtection = {
    Setup = setupEnhancedAntiBan,
    BlockFunction = blockBadFunction,
    SpoofMemory = spoofMemory,
    ProtectThreads = protectThreads,
    BlockRemotes = blockBanRemotes
}

return getgenv().SupremeProtection
